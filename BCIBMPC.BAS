1  GOTO  1000: REM BASICODE-3 version 2.6, (C) 1989, H. Vosman
2  REM EGA / VGA-Color revision and German version: 050992 A.Garten
3  REM completion of 3C support, printer redirection option,
4  REM and modernization of the time delay: 30457, K.Schenk
5  REM For printer redirection please set OPRN in line 43 to 1;
6  REM Please start REM in future with the option / f: 9
7  REM Disclaimer: This program is for non-commercial purposes and
8  REM no liability is assumed! 
9  REM translated to English by fralaz1971 on 2021-03-22
10 REM
20 KEY OFF: CLEAR : OPTION  BASE 0: SCREEN 0: CLS : COLOR 7, 0, 0
21 ODUMMY% = 3: OCH% = 0: DIM OPT%(108): FR = 0: GOSUB 280
22 OGRP = 9:               REM EGA mode for graphics mode
23 OGH% = 639: OGV% = 349: REM limits for graphic display (EGA)
24 OTH% = 80: OTV% = 43:   REM limits for text in graphics mode
25 OHT% = 80: OVT% = 24:   REM limits for text in text mode
26 OTIME = 120 * 100: REM time correction value (here: IBM 386 AT (25 MHz)) 
27 DIM CC(1): CC(0) = 7: CC(1) = 0: REM Standard color setting 
28 WIDTH OHT%: LOCATE 1, 1, 0: ON ERROR GOTO  975
29 HG = OGH% + 1: VG = OGV% + 1: HO = OHT% - 1: VE = OVT% - 1: CT = 0: CN = 0: SR = 0: SR$ = "": IN$ = " ": SV = 7
30 OX$ = TIME$: RANDOMIZE (VAL(LEFT$(OX$, 2)) + VAL(MID$(OX$, 4, 2)) + VAL(RIGHT$(OX$, 2)))
31 REM Character table for text in graphics mode
32 O$(0) = "14EB4890562E736F616D2C6E28202943202C393138388B5506EC"
33 O$(1) = "5756B81E358821CDFB8B00E85E00EE83B924000875A6E205EBFB"
34 O$(2) = "9009A6BB8EFFBBC3000E8B1F0C760C8B768B8B0A8B140876048B"
35 O$(3) = "0CB4768B53061C8BE3D1E3D1E3D1F38B035BBFF300088A26B71C"
36 O$(4) = "4601FB840E7457565350525110CD595A585B5E5F804980FF0474"
37 O$(5) = "E7D0E4EBC1834208754F5FD7075EE58BCA5D0008000000000000"
38 OCH% = 0: FOR OC1% = 0 TO 5: FOR OC2% = 0 TO 12
39 OPT%(OCH%) = VAL("&H" + MID$(O$(OC1%), (OC2% * 4) + 1, 4))
40 OCH% = OCH% + 1: NEXT: NEXT: ERASE O$
41 KEY 1, CHR$(186): KEY 2, CHR$(187): KEY 3, CHR$(188): KEY 4, CHR$(189): KEY 5, CHR$(190)
42 KEY 6, CHR$(191): KEY 7, CHR$(192): KEY 8, CHR$(193): KEY 9, CHR$(194): KEY 10, CHR$(195)
43 OPRN = 0: REM setting for printer redirection 
46 IF OPRN = 1 THEN OPEN "Printer.txt" FOR OUTPUT AS 9
49 GOTO 1010
60 REM  Change color palette for foreground colors
61 PALETTE 2, 4: PALETTE 3, 5: PALETTE 4, 2: PALETTE 5, 3
62 PALETTE 6, 14: PALETTE 8, 0: RETURN
100 SCREEN 0: GOSUB 60: WIDTH OHT%: COLOR CC(0), CC(1): CLS : LOCATE , , 0: RETURN
110 OVE% = INT(VE) + 1: OHO% = INT(HO) + 1
111 IF OVE% > OVT% THEN  OVE% = OVT% ELSE IF OVE% < 1 THEN  OVE% = 1
112 IF OHO% > OHT% THEN  OHO% = OHT% ELSE IF OHO% < 1 THEN  OHO% = 1
113 COLOR CC(0), CC(1): LOCATE OVE%, OHO%, 0: RETURN
120 HO = POS(HO) - 1: VE = CSRLIN - 1: RETURN
150 PRINT  " "; : COLOR CC(1), CC(0), 0: PRINT  "  "; SR$; "  ";
151 COLOR CC(0), CC(1), 0: PRINT  " "; : RETURN
200 IN$ = INKEY$: IF IN$ <> "" GOTO  212 ELSE IN = 0: RETURN
210 LOCATE , , 1: REM Cursor einschalten
211 IN$ = INKEY$: IF IN$ = "" GOTO  211 ELSE LOCATE , , 0
212 OFIN% = ASC(RIGHT$(IN$, 1)): IN$ = LEFT$(IN$, 1): IN = ASC(IN$)
213 CN = 0: IF IN > 64 AND IN < 91 THEN  CN = IN + 32: IF IN > 96 AND IN < 123 THEN  CN = IN - 32
214 IF IN > 185 AND IN < 196 THEN  IN = (IN - 185) * -1: RETURN
215 IF (IN > 31) AND (IN < 96) THEN  RETURN ELSE IF (IN > 95) AND (IN < 128) THEN  IN = IN - 32: RETURN
216 IF (IN=8)GOTO  225:RETURN ELSE IF (IN=13)THEN  RETURN
217 IF (IN <> 0) THEN  IN = -IN: IN$ = CHR$(2): RETURN
218 IF (OFIN% = 72) THEN  IN = 31 ELSE IF (OFIN% = 75) THEN  IN = 28 ELSE IF (OFIN% = 77) THEN  IN = 29 ELSE IF (OFIN% = 80) THEN  IN = 30 ELSE IF (OFIN% = 83) OR (OFIN% = 8) GOTO  225 ELSE IN = -OFIN% - 256
219 IN$ = CHR$(1): RETURN
220 OVE% = INT(VE) + 1: OHO% = INT(HO) + 1
221 IF ((OHO% < 1) OR (OHO% > OHT%)) OR ((OVE% < 1) OR (OVE% > OVT%)) THEN  IN = 0: RETURN
222 IN = SCREEN(OVE%, OHO%): IF (IN < 32) OR (IN > 127) THEN  IN = 0: RETURN ELSE OFIN% = 1: GOTO  214
225 IN = 127: OFIN% = POS(0)
226 IF OFIN% = 1 THEN  IN$ = "": RETURN ELSE IN$ = CHR$(29) + " " + CHR$(29)
227 IF OFIN% = OHT% THEN  IN$ = CHR$(29) + IN$
228 IF OFIN% = OHT% - 1 THEN  IN$ = CHR$(29) + CHR$(29) + IN$
229 RETURN
250 BEEP: RETURN
260 RV = RND(1): RETURN
270 FR = FRE(""): RETURN
280 REM STOP-Tasten-Behandlung
281 IF FR = 1 THEN  KEY 15, CHR$(4) + CHR$(70): ON  KEY(15) GOSUB 283: KEY(15) ON  ELSE KEY(15) OFF
282 RETURN
283 RETURN: REM Dummy-Routine fuer STOP-Taste (= Control-Break)
300 SR$ = MID$(STR$(ABS(SR)), 2): IF LEFT$(SR$, 1) = "." THEN  SR$ = "0" + SR$
301 IF SR < 0 THEN  SR$ = "-" + SR$
302 RETURN
310 SR$ = "": IF CT <= 0 THEN  RETURN ELSE OS# = CDBL(ABS(SR))
311 IF CN <= 0 THEN  OI# = INT(OS# + .5): OF# = 0: GOTO  313 ELSE OI# = INT(OS# + .5 * 10 ^ -CN): OF# = INT(((OS# - OI#) * 10 ^ CN) + .5)
312 OFIP# = OF#: GOSUB 316: IF OX$ = "" GOTO  315 ELSE SR$ = "." + STRING$(CN - LEN(OX$), 48) + OX$
313 OFIP# = OI#: GOSUB 316: IF OX$ = "" GOTO  315 ELSE SR$ = OX$ + SR$: IF (SGN(SR) < 0) AND (NOT ((OI# = 0) AND (OF# = 0))) THEN  SR$ = "-" + SR$
314 IF LEN(SR$) <= CT THEN  SR$ = STRING$(CT - LEN(SR$), 32) + SR$: RETURN
315 SR$ = STRING$(CT, 42): RETURN
316 IF OFIP# > 10 ^ 16 THEN  OX$ = "": RETURN ELSE OX$ = MID$(STR$(OFIP#), 2): RETURN
330 OI1% = LEN(SR$): OX$ = "": FOR  OI2% = 1 TO  OI1%: OI3% = ASC(MID$(SR$, OI2%, 1))
331 IF (OI3% > 95) AND (OI3% < 128) THEN  OI3% = OI3% - 32
332 OX$ = OX$ + CHR$(OI3%): NEXT: SR$ = OX$: RETURN
350 IF OPRN = 0 THEN  LPRINT  SR$; : RETURN
355 IF OPRN = 1 THEN  PRINT  #9, SR$; : RETURN
360 IF OPRN = 0 THEN  LPRINT  : RETURN
365 IF OPRN = 1 THEN  PRINT  #9, "": RETURN
400 OSD = 1.82 * SD: IF OSD < .023 THEN  OSD = .023
401 IF SV = 0 GOTO  404
402 IF SP < 26 THEN  OSP = 26 ELSE IF SP > 127 THEN  OSP = 127 ELSE OSP = SP
403 PLAY "MF": SOUND EXP(OSP * .057762 + 2.10125), OSD: RETURN
404 PLAY "MF": SOUND 32767, OSD: RETURN
450 OTIME = TIMER
451 OMO = .1 * SD: SD = 0: IN = 0: LOCATE , , 1: REM Switch on cursor
452 IN$ = INKEY$
453 IF TIMER > OMO + OTIME THEN  GOTO  456
454 IF IN$ <> "" AND SV <> 0 THEN  SD = TIMER - OTIME: GOTO  456
455 GOTO  452
456 LOCATE , , 0: IF SD = 0 THEN  IN$ = "": RETURN ELSE GOTO  212
500 GOSUB 510: IF (ON F% < 1) OR (ON F% > 8) THEN  IN = -1: GOSUB 250: RETURN
501 IF NF$ = "" THEN  ERROR 250: REM Test, ob Dateiname fehlt
502 IN = 0: CLOSE ON F%: IF (ON F% MOD 2) = 0 GOTO  505
504 OPEN "I", ON F%, NF$: RETURN: REM Open file for input
505 OPEN "O", ON F%, NF$: RETURN: REM Open file for output
510 ON F% = CINT(NF) + 1: RETURN
540 REM Read in data
541 GOSUB 510: IN = 0: IN$ = "": IF EOF(ON F%) THEN IN = 1: RETURN
542 LINE INPUT #ON F%, IN$: IF EOF(ON F%) THEN  IN = 1
543 RETURN
560 REM Output data
562 GOSUB 510: IN = 0: PRINT  #ON F%, SR$; CHR$(13);
563 RETURN
580 GOSUB 510: IF (ON F% < 1) OR (ON F% > 8) THEN  IN = -1: GOSUB 250: RETURN
581 IN = 0: CLOSE ON F%: RETURN
600 SCREEN OGRP: GOSUB 60: GOSUB 605: CLS : RETURN
605 OCCV = CC(0): IF OCCV = 0 THEN  OCCV = 8: REM color 0,... forbidden
606 OCCH = CC(1)
607 IF OCCH = 2 THEN  OCCH = 4: GOTO  611: REM Correct background colors
608 IF OCCH = 3 THEN  OCCH = 5: GOTO  611
609 IF OCCH = 4 THEN  OCCH = 2: GOTO  611
610 IF OCCH = 5 THEN  OCCH = 3
611 COLOR OCCV, OCCH: RETURN
612 IF HO < 0 THEN  OHOR% = 0 ELSE IF HO >= 1 THEN  OHOR% = OGH% ELSE OHOR% = CINT(OGH% * HO)
613 IF VE < 0 THEN  OVER% = 0 ELSE IF VE >= 1 THEN  OVER% = OGV% ELSE OVER% = CINT(OGV% * VE)
614 RETURN
620 GOSUB 605: GOSUB 612: IF CN = 1 THEN  PRESET (OHOR%, OVER%) ELSE PSET (OHOR%, OVER%)
621 RETURN
630 GOSUB 605: GOSUB 612: IF CN = 1 THEN  LINE -(OHOR%, OVER%), 0 ELSE LINE -(OHOR%, OVER%)
631 RETURN
650 REM Textausgabe im Grafik-Modus
651 GOSUB 605: GOSUB 612: OHO% = OHOR% + 7: OVE% = OVER%
652 OI1% = LEN(SR$): IF CN = 0 THEN  OI3% = OCCV ELSE OI3% = OCCH
653 FOR  OI2% = 1 TO  OI1%: OCH% = ASC(MID$(SR$, OI2%, 1))
654 IF OHO% > OGH% THEN  OVE% = OVE% + 8: OHO% = 7
655 IF OVE% > (OGV% - 7) THEN  OVE% = OGV% - 7
656 ODUMMY%=VARPTR(OPT%(0)):CALL ODUMMY%(OHO%,OVE%,OI3%,OCH%):OHO%=OHO%+8
657 NEXT
658 ODUMMY% = POINT(OHOR%, OVER%): PSET (OHOR%, OVER%), ODUMMY%
659 RETURN
950 IF OPRN = 1 THEN CLOSE 9
951 GOSUB 956: ON ERROR GOTO 0: END
956 FR = 0: GOSUB 280: SCREEN 0, 0, 0: WIDTH 80: LOCATE , , 1: COLOR 7, 0, 0: KEY OFF: CLS : RETURN
975 OHO% = POS(0): OVE% = CSRLIN: LOCATE 25, 1
976 IF ERR = 24 THEN PRINT "Input or output device does not answer!"; : BEEP: GOTO 995
977 IF ERR = 27 THEN PRINT "Printer has no paper!"; : BEEP: GOTO 994
978 IF ERR = 1 THEN PRINT "NEXT without FOR in line"; ERL; : GOTO 994
979 IF ERR = 26 THEN PRINT "FOR without NEXT in line"; ERL; : GOTO 994
980 IF ERR = 4 THEN PRINT "Too few DATA statements in the program!"; : GOTO 994
981 IF ERR = 5 THEN PRINT "Illegal function call in line"; ERL; : GOTO 994
982 IF ERR = 11 THEN PRINT "Division by 0 in line"; ERL; : GOTO 994
983 IF ERR = 8 THEN PRINT "Undefined line number in line"; ERL: GOTO 994
984 IF ERR = 52 THEN PRINT "Invalid file number!"; : IN = -1: BEEP: GOTO 994 
985 IF ((ERR> = 53) AND (ERR <= 55)) OR (ERR = 62) OR (ERR = 67) OR (ERR> = 70) THEN IN = -1: PRINT "Error when accessing diskette in line" ; ERL; : GOTO 994
986 IF ERR = 61 THEN IN = -1: PRINT "Disk is full!"; : GOTO 994
987 IF (ERR = 250) THEN IN = -1: PRINT "File name is missing!"; : BEEP: GOTO 994
990 IF ERR <> 2 THEN 993
991 GOSUB 951: PRINT "BASIC error message: syntax error in line"; ERL; : LOCATE OVE%, OHO%
992 ON ERROR GOTO 0: RESUME
993 PRINT "General error"; ERR; "in line"; ERL; "More details in the manual!"; 
994 O$ = INPUT $(1): LOCATE 25, 1: PRINT  SPC(OHT% - 1);
995 LOCATE OVE%, OHO%: RESUME NEXT
996 REM ---------  End of Bascoder  -----------
